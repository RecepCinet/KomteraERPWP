<?php
 namespace phpCtrl; if (!session_id()) { session_start(); } class C_Database { public $hostName; public $userName; public $password; public $databaseName; public $tableName; public $link; public $dbType; public $charset; public $db; public $result; public function __construct($host, $user, $pass, $dbName, $db_type = "\155\x79\163\161\154", $charset = '') { $this->hostName = $host; $this->userName = $user; $this->password = $pass; $this->databaseName = $dbName; $this->dbType = $db_type; $this->charset = $charset; $this->_db_connect(); } public function _db_connect() { switch ($this->dbType) { case "\141\143\143\x65\x73\163": $this->db = ADONewConnection($this->dbType); $dsn = "\x44\162\151\166\x65\x72\x3d\173\x4d\151\x63\x72\x6f\163\157\x66\164\x20\x41\143\x63\145\x73\163\x20\104\162\151\166\x65\162\40\50\52\x2e\x6d\x64\142\51\x7d\x3b\104\x62\x71\x3d" . $this->databaseName . "\x3b\125\x69\x64\x3d" . $this->userName . "\73\x50\x77\x64\x3d" . $this->password . "\73"; $this->db->Connect($dsn); break; case "\x6f\x64\142\143\x5f\155\x73\163\x71\154\x5f\156\141\x74\151\166\145": $this->db = ADONewConnection("\157\144\x62\143\x5f\155\x73\163\x71\154"); $dsn = "\x44\162\151\x76\145\x72\x3d\173\123\121\x4c\40\123\145\x72\166\145\x72\175\x3b\123\x65\x72\x76\x65\x72\75" . $this->hostName . "\73\x44\141\164\x61\142\141\163\x65\x3d" . $this->databaseName . "\x3b"; $this->db->Connect($dsn, $this->userName, $this->password); break; case "\157\144\x62\x63\137\155\163\x73\161\x6c": $this->db = ADONewConnection($this->dbType); $this->db->Connect($this->hostName, $this->userName, $this->password); break; case "\160\157\163\x74\147\x72\x65\x73": $this->db = ADONewConnection($this->dbType); $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName) or die("\105\x72\162\157\162\x3a\x20\103\157\x75\154\x64\x20\x6e\x6f\164\40\143\x6f\x6e\156\x65\x63\164\x20\164\x6f\40\x74\x68\145\40\x64\141\164\141\142\x61\x73\x65"); if (!empty($this->charset)) { $this->db->Execute("\x53\105\x54\x20\116\x41\x4d\x45\123\x20\47{$this->charset}\47"); } break; case "\144\142\62": $this->db = ADONewConnection($this->dbType); $dsn = "\x64\162\x69\x76\145\x72\75\x7b\111\102\115\x20\x64\142\62\x20\157\x64\142\x63\40\x44\122\111\126\x45\122\175\x3b\104\141\164\141\142\x61\163\x65\x3d" . $this->databaseName . "\73\x68\157\163\x74\156\141\x6d\145\75" . $this->hostName . "\73\x70\x6f\162\x74\x3d\65\x30\60\60\60\x3b\160\162\x6f\164\157\x63\157\x6c\75\124\x43\120\111\120\73\x75\151\x64\x3d" . $this->userName . "\73\40\160\x77\x64\x3d" . $this->password; $this->db->Connect($dsn); break; case "\144\x62\62\55\x64\163\156\x6c\145\x73\163": $this->db = ADONewConnection("\144\x62\62"); $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName); break; case "\x69\x62\141\x73\145": $this->db = ADONewConnection($this->dbType); $this->db->Connect($this->hostName . $this->databaseName, $this->userName, $this->password); break; case "\157\x63\x69\x38\x30\x35": $this->db = ADONewConnection($this->dbType); $ret = $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName); if (!$ret) { $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName); } break; case "\163\161\154\151\164\x65": $this->db = ADONewConnection("\163\x71\x6c\x69\x74\x65"); $this->db->Connect($this->hostName); break; case "\x69\x6e\146\x6f\x72\155\151\x78": $this->db = ADONewConnection("\x69\x6e\x66\x6f\x72\155\x69\170"); $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName) or die("\105\x72\162\157\162\x3a\x20\103\157\x75\x6c\144\40\156\157\x74\x20\x63\157\156\x6e\x65\143\164\x20\164\x6f\40\164\x68\145\x20\144\x61\x74\141\x62\x61\163\x65"); break; case "\x69\x6e\x66\157\162\155\x69\x78\67\x32": $this->db = ADONewConnection("\x69\156\146\157\x72\x6d\x69\170\x37\62"); $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName) or die("\x45\x72\x72\157\162\72\40\x43\157\x75\154\x64\40\156\x6f\164\x20\143\x6f\156\x6e\145\143\x74\x20\164\x6f\x20\x74\150\x65\40\144\141\x74\x61\x62\141\163\x65"); break; case "\157\x64\142\x63": $this->db = ADONewConnection($this->dbType); $dsn = "\x44\x53\x4e\x3d" . $this->hostName . "\73\165\x69\x64\75" . $this->userName . "\73\x20\160\x77\x64\x3d" . $this->password; $this->db->Connect($dsn); break; default: $this->db = ADONewConnection("\x6d\x79\163\x71\x6c\151"); $this->db->Connect($this->hostName, $this->userName, $this->password, $this->databaseName) or die("\105\162\x72\x6f\162\x3a\x20\103\x6f\165\x6c\144\x20\156\157\x74\x20\143\x6f\156\156\145\x63\x74\40\x74\157\40\x74\x68\x65\40\x64\x61\x74\x61\142\x61\163\145"); if (!empty($this->charset)) { $this->db->Execute("\123\x45\x54\40\116\101\x4d\x45\x53\x20\47{$this->charset}\x27"); } } } public function db_query($query_str) { $this->db->SetFetchMode(ADODB_FETCH_BOTH); $result = $this->db->Execute($query_str) or die(C_Utility::is_debug() ? "\12" . "\x50\x48\120\x47\122\111\104\x5f\x44\x45\x42\x55\x47\72\40\103\137\104\x61\164\x61\x62\x61\163\x65\55\x3e\144\142\x5f\161\x75\145\x72\x79\x28\x29\x20\55\x20" . $this->db->ErrorMsg() . "\xa" : "\xa" . "\x50\110\120\x47\x52\x49\104\137\x45\122\x52\117\122\x3a\40\x43\x6f\165\154\144\40\x6e\157\x74\x20\x65\170\x65\x63\165\164\145\x20\161\x75\x65\x72\x79\56\x20\x45\162\162\x6f\x72\40\x31\x30\61\x2e" . "\12"); $this->result = $result; return $result; } public function select_limit($query_str, $size, $starting_row) { $this->db->SetFetchMode(ADODB_FETCH_BOTH); $result = $this->db->SelectLimit($query_str, $size, $starting_row) or die(C_Utility::is_debug() ? "\12" . "\120\x48\120\x47\122\111\x44\137\104\x45\x42\125\x47\x3a\40\x43\137\104\x61\164\x61\x62\141\x73\145\x2d\76\x73\x65\154\145\x63\164\x5f\154\151\x6d\x69\164\x28\51\40\55\40" . $this->db->ErrorMsg() . "\12" : "\12" . "\x50\110\120\107\x52\111\104\137\105\x52\122\x4f\x52\x3a\x20\x43\x6f\x75\x6c\x64\40\x6e\157\x74\40\x65\170\145\143\165\x74\145\x20\161\x75\x65\162\x79\x2e\x20\105\162\x72\157\162\x20\61\x30\x32" . "\xa"); $this->result = $result; return $result; } public function select_limit_array($query_str, $size, $starting_row) { $result = $this->select_limit($query_str, $size, $starting_row); $resultArray = $result->GetArray(); $this->result = $resultArray; return $resultArray; } public function fetch_row(&$result) { $ADODB_FETCH_MODE = ADODB_FETCH_NUM; if (!$result->EOF) { $rs = $result->fields; $result->MoveNext(); return $rs; } } public function fetch_array(&$result) { $ADODB_FETCH_MODE = ADODB_FETCH_BOTH; if (!$result->EOF) { $rs = $result->fields; $result->MoveNext(); return $rs; } } public function fetch_array_assoc(&$result) { $ADODB_FETCH_MODE = ADODB_FETCH_ASSOC; if (!$result->EOF) { $rs = $result->fields; $result->MoveNext(); return $rs; } } public function num_rows($result) { return $result->RecordCount(); } public function query_then_fetch_array_first($query_str) { $ADODB_FETCH_MODE = ADODB_FETCH_BOTH; $result = $this->db->Execute($query_str) or die("\x50\110\120\x47\x52\x49\104\137\x45\122\122\117\x52\x3a\x20\161\165\x65\162\171\x5f\164\150\145\x6e\137\x66\145\x74\143\150\x5f\141\x72\x72\141\171\x5f\x66\x69\162\x73\164\50\51\x20\55\40" . $this->db->ErrorMsg()); if (!$result->EOF) { $rs = $result->fields; $result->MoveNext(); return $rs; } } public function num_fields($result) { return $result->FieldCount(); } public function field_name($result, $index) { $obj_field = new \ADOFieldObject(); $obj_field = $result->FetchField($index); return isset($obj_field->name) ? $obj_field->name : ''; } public function field_nativetype($result, $index) { $obj_field = new \ADOFieldObject(); $obj_field = $result->FetchField($index); return isset($obj_field->type) ? $obj_field->type : ''; } public function field_metatype($result, $index) { $obj_field = new \ADOFieldObject(); $obj_field = $result->FetchField($index); $type = $result->MetaType($obj_field->type, $obj_field->max_length); return $type; } public function field_metacolumn($table, $col_name) { $arr = array(); $arr = $this->db->MetaColumns($table); $obj_field = new \ADOFieldObject(); if (isset($arr[strtoupper($col_name)])) { $obj_field = $arr[strtoupper($col_name)]; return $obj_field; } else { return false; } } public function field_index($result, $field_name) { $field_count = $this->num_fields($result); $i = 0; for ($i = 0; $i < $field_count; $i++) { if ($field_name == $this->field_name($result, $i)) { return $i; } } return -1; } public function field_len($result, $index) { $obj_field = new \ADOFieldObject(); $obj_field = $result->FetchField($index); return isset($obj_field->max_length) ? $obj_field->max_length : ''; } function quote_field($sql, $fieldname, $fieldvalue) { $rs = $this->select_limit($sql, 1, 1); $fm_type = $this->field_metatype($rs, $this->field_index($rs, $fieldname)); switch ($fm_type) { case "\111": case "\x4e": case "\122": case "\114": $qstr = $fieldname . "\75" . $fieldvalue; break; default: $qstr = $fieldname . "\75\47" . $fieldvalue . "\47"; break; } return $qstr; } function quote_fields(&$rs, $sql_key = array(), $key_value = array()) { $pk_val_new = array(); $fm_types = array(); for ($t = 0; $t < count($sql_key); $t++) { $fm_type = $this->field_metatype($rs, $this->field_index($rs, $sql_key[$t])); $fm_types[] = $fm_type; } for ($i = 0; $i < count($key_value); $i++) { $pk_val_fields = explode(PK_DELIMITER, $key_value[$i]); for ($j = 0; $j < count($sql_key); $j++) { $fm_type = $fm_types[$j]; if ($fm_type != "\x49" && $fm_type != "\x4e" && $fm_type != "\x52") { $pk_val_fld = "\47" . $pk_val_fields[$j] . "\x27"; } else { $pk_val_fld = $pk_val_fields[$j]; } $pk_val_fields[$j] = $pk_val_fld; } $pk_val_new[] = "\50" . implode("\x2c", $pk_val_fields) . "\51"; } return $pk_val_new; } public function get_col_dbnames($result) { $col_dbnames = array(); $num_fields = $result->FieldCount(); for ($i = 0; $i < $num_fields; $i++) { $col_dbname = $this->field_name($result, $i); $col_dbnames[] = $col_dbname; } return $col_dbnames; } }